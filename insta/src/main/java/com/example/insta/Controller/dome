package com.example.insta.Controller;

import com.example.insta.util.JwtTokenProvider;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api")
@RequiredArgsConstructor
public class AuthController {

    private final AuthenticationManager authenticationManager;
    private final JwtTokenProvider jwtTokenProvider;

    // 로그인 엔드포인트
    @PostMapping("/login")
    public ResponseEntity<?> login(@RequestParam String username, @RequestParam String password) {
        try {
            // Spring Security를 통해 사용자 인증
            Authentication authentication = authenticationManager.authenticate(
                    new UsernamePasswordAuthenticationToken(username, password)
            );

            // 하드코딩된 username과 password로 인증 처리
            String hardcodedUsername = "영일영";
            String hardcodedPassword = "1234";

            // 인증 성공 시 JWT 토큰 생성
            String token = jwtTokenProvider.generateToken(authentication.getName());

            // 생성된 JWT를 클라이언트에 반환
            return ResponseEntity.ok().body("{\"token\":\"" + token + "\"}");
        } catch (AuthenticationException e) {
            // 인증 실패 시 401 상태 코드 반환
            return ResponseEntity.status(401).body("Invalid credentials");
        }
    }
}
